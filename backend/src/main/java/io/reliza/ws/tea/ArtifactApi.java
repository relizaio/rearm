/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.reliza.ws.tea;

import io.reliza.model.tea.TeaArtifact;
import io.reliza.model.tea.TeaErrorResponse;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-15T13:35:56.249199300-04:00[America/Toronto]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "TEA Artifact", description = "the TEA Artifact API")
public interface ArtifactApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /artifact/{uuid}
     * Get metadata for specific TEA artifact
     *
     * @param uuid UUID of TEA Artifact in the TEA server (required)
     * @return Requested TEA Artifact metadata found and returned (status code 200)
     *         or Request was Invalid (status code 400)
     *         or Object requested by identifier not found (status code 404)
     */
    @Operation(
        operationId = "getArtifact",
        description = "Get metadata for specific TEA artifact",
        tags = { "TEA Artifact" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Requested TEA Artifact metadata found and returned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeaArtifact.class))
            }),
            @ApiResponse(responseCode = "400", description = "Request was Invalid"),
            @ApiResponse(responseCode = "404", description = "Object requested by identifier not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeaErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/artifact/{uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TeaArtifact> getArtifact(
        @Parameter(name = "uuid", description = "UUID of TEA Artifact in the TEA server", required = true, in = ParameterIn.PATH) @PathVariable("uuid") UUID uuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"formats\" : [ { \"checksums\" : [ { \"algValue\" : \"algValue\", \"algType\" : \"MD5\" }, { \"algValue\" : \"algValue\", \"algType\" : \"MD5\" } ], \"signatureUrl\" : \"http://example.com/aeiou\", \"description\" : \"description\", \"mimeType\" : \"mimeType\", \"url\" : \"http://example.com/aeiou\" }, { \"checksums\" : [ { \"algValue\" : \"algValue\", \"algType\" : \"MD5\" }, { \"algValue\" : \"algValue\", \"algType\" : \"MD5\" } ], \"signatureUrl\" : \"http://example.com/aeiou\", \"description\" : \"description\", \"mimeType\" : \"mimeType\", \"url\" : \"http://example.com/aeiou\" } ], \"distributionTypes\" : [ \"distributionTypes\", \"distributionTypes\" ], \"name\" : \"name\", \"type\" : \"ATTESTATION\", \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"OBJECT_UNKNOWN\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
