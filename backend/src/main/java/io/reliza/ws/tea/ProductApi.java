/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.reliza.ws.tea;

import io.reliza.model.tea.TeaProduct;
import io.reliza.model.tea.TeaProductRelease;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-13T12:58:45.490102-04:00[America/Toronto]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "TEA Product Release", description = "the TEA Product Release API")
public interface ProductApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /product/{uuid}/releases
     * Get releases of the product
     *
     * @param uuid UUID of TEA Product in the TEA server (required)
     * @return Requested Releases of TEA Product found and returned (status code 200)
     *         or Request was Invalid (status code 400)
     *         or Object requested by identifier not found (status code 404)
     */
    @Operation(
        operationId = "getReleasesByProductId",
        description = "Get releases of the product",
        tags = { "TEA Product Release" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Requested Releases of TEA Product found and returned", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeaProductRelease.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Request was Invalid"),
            @ApiResponse(responseCode = "404", description = "Object requested by identifier not found")
        },
        security = {
            @SecurityRequirement(name = "basicAuth"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/{uuid}/releases",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TeaProductRelease>> getReleasesByProductId(
        @Parameter(name = "uuid", description = "UUID of TEA Product in the TEA server", required = true, in = ParameterIn.PATH) @PathVariable("uuid") UUID uuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"product\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"components\" : [ { \"release\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"release\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"createdDate\" : \"2024-03-20T15:30:00Z\", \"releaseDate\" : \"2024-03-20T15:30:00Z\", \"identifiers\" : [ { \"idType\" : \"CPE\", \"idValue\" : \"idValue\" }, { \"idType\" : \"CPE\", \"idValue\" : \"idValue\" } ], \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"version\" : \"2.24.3\", \"preRelease\" : true }, { \"product\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"components\" : [ { \"release\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"release\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ], \"createdDate\" : \"2024-03-20T15:30:00Z\", \"releaseDate\" : \"2024-03-20T15:30:00Z\", \"identifiers\" : [ { \"idType\" : \"CPE\", \"idValue\" : \"idValue\" }, { \"idType\" : \"CPE\", \"idValue\" : \"idValue\" } ], \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"version\" : \"2.24.3\", \"preRelease\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product/{uuid}
     * Get a TEA Product by UUID
     *
     * @param uuid UUID of the TEA product in the TEA server (required)
     * @return Requested TEA Product found and returned (status code 200)
     *         or Request was Invalid (status code 400)
     *         or Object requested by identifier not found (status code 404)
     */
    @Operation(
        operationId = "getTeaProductByUuid",
        description = "Get a TEA Product by UUID",
        tags = { "TEA Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Requested TEA Product found and returned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeaProduct.class))
            }),
            @ApiResponse(responseCode = "400", description = "Request was Invalid"),
            @ApiResponse(responseCode = "404", description = "Object requested by identifier not found")
        },
        security = {
            @SecurityRequirement(name = "basicAuth"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/{uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TeaProduct> getTeaProductByUuid(
        @Parameter(name = "uuid", description = "UUID of the TEA product in the TEA server", required = true, in = ParameterIn.PATH) @PathVariable("uuid") UUID uuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"identifiers\" : [ { \"idType\" : \"CPE\", \"idValue\" : \"idValue\" }, { \"idType\" : \"CPE\", \"idValue\" : \"idValue\" } ], \"name\" : \"name\", \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
