/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.reliza.ws.tea;

import io.reliza.model.tea.TeaDiscoveryInfo;
import io.reliza.model.tea.TeaErrorResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-11T15:33:29.932635600-04:00[America/Toronto]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "TEA Discovery", description = "the TEA Discovery API")
public interface DiscoveryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /discovery
     * Discovery endpoint which resolves TEI into product release UUID.
     *
     * @param tei Transparency Exchange Identifier (TEI) for the product being discovered. Provide the TEI as a URL-encoded string per RFC 3986, RFC 3987. (required)
     * @return Discovery information for the requested TEI (status code 200)
     *         or Request was Invalid (status code 400)
     *         or Object requested by identifier not found (status code 404)
     */
    @Operation(
        operationId = "discoveryByTei",
        description = "Discovery endpoint which resolves TEI into product release UUID.",
        tags = { "TEA Discovery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Discovery information for the requested TEI", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeaDiscoveryInfo.class))
            }),
            @ApiResponse(responseCode = "400", description = "Request was Invalid"),
            @ApiResponse(responseCode = "404", description = "Object requested by identifier not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeaErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/discovery",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TeaDiscoveryInfo> discoveryByTei(
        @NotNull @Parameter(name = "tei", description = "Transparency Exchange Identifier (TEI) for the product being discovered. Provide the TEI as a URL-encoded string per RFC 3986, RFC 3987.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "tei", required = true) String tei
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"versions\" : [ \"0.2.0-beta.2\", \"1.0.0\" ], \"productReleaseUuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"rootUrl\" : \"https://api.teaexample.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"OBJECT_UNKNOWN\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
