import gql from 'graphql-tag'
import graphqlClient from './graphql'
import { processMetricsData } from './metrics'

export interface ReleaseVulnerabilityData {
    artifacts: any[]
    orgUuid: string
    dtrackProjectUuids: string[]
    vulnerabilityData: any
}

export class ReleaseVulnerabilityService {
    private static readonly RELEASE_DETAILS_QUERY = gql`
        query getReleaseDetails($releaseUuid: ID!, $orgUuid: ID) {
            release(releaseUuid: $releaseUuid, orgUuid: $orgUuid) {
                uuid
                version
                org
                artifactDetails {
                    uuid
                    metrics { dependencyTrackFullUri }
                }
                sourceCodeEntryDetails {
                    artifactDetails {
                        uuid
                        metrics { dependencyTrackFullUri }
                    }
                }
                inboundDeliverableDetails {
                    artifactDetails {
                        uuid
                        metrics { dependencyTrackFullUri }
                    }
                }
                variantDetails {
                    outboundDeliverableDetails {
                        artifactDetails {
                            uuid
                            metrics { dependencyTrackFullUri }
                        }
                    }
                }
                metrics {
                    vulnerabilityDetails { purl vulnId severity }
                    violationDetails { purl type License violationDetails }
                    weaknessDetails { cweId ruleId location fingerprint severity }
                }
            }
        }
    `

    /**
     * Fetches release vulnerability data and processes it into a structured format
     * @param releaseUuid - The UUID of the release to fetch data for
     * @param orgUuid - The organization UUID
     * @returns Promise containing processed release vulnerability data
     */
    static async fetchReleaseVulnerabilityData(
        releaseUuid: string, 
        orgUuid: string
    ): Promise<ReleaseVulnerabilityData> {
        const response = await graphqlClient.query({
            query: this.RELEASE_DETAILS_QUERY,
            variables: {
                releaseUuid,
                orgUuid
            }
        })

        const releaseData = response.data.release
        if (!releaseData) {
            throw new Error('Release data not found')
        }

        // Extract artifacts from all sources
        const artifacts = this.extractAllArtifacts(releaseData)
        
        // Extract Dependency-Track project UUIDs
        const dtrackProjectUuids = this.extractDtrackProjectUuids(artifacts)

        // Process metrics data
        const vulnerabilityData = releaseData.metrics 
            ? processMetricsData(releaseData.metrics)
            : null

        return {
            artifacts,
            orgUuid: releaseData.org || '',
            dtrackProjectUuids,
            vulnerabilityData
        }
    }

    /**
     * Extracts all artifacts from various release data sources
     * @param releaseData - The release data from GraphQL response
     * @returns Array of all artifacts
     */
    private static extractAllArtifacts(releaseData: any): any[] {
        const releaseOwnArtifacts = Array.isArray(releaseData.artifactDetails) 
            ? releaseData.artifactDetails 
            : []

        const releaseInboundArtifacts = (
            Array.isArray(releaseData?.inboundDeliverableDetails)
                ? releaseData.inboundDeliverableDetails
                : (releaseData?.inboundDeliverableDetails ? [releaseData.inboundDeliverableDetails] : [])
        ).flatMap((e: any) => e?.artifactDetails ?? [])

        const releaseVariantArtifacts = (
            Array.isArray(releaseData?.variantDetails)
                ? releaseData.variantDetails
                : (releaseData?.variantDetails ? [releaseData.variantDetails] : [])
        )
            .flatMap((v: any) => v?.outboundDeliverableDetails ?? [])
            .flatMap((d: any) => d?.artifactDetails ?? [])

        const releaseSourceCodeArtifacts = (
            Array.isArray(releaseData?.sourceCodeEntryDetails)
                ? releaseData.sourceCodeEntryDetails
                : (releaseData?.sourceCodeEntryDetails ? [releaseData.sourceCodeEntryDetails] : [])
        ).flatMap((e: any) => e?.artifactDetails ?? [])

        return [
            ...releaseOwnArtifacts, 
            ...releaseInboundArtifacts, 
            ...releaseVariantArtifacts, 
            ...releaseSourceCodeArtifacts
        ]
    }

    /**
     * Extracts Dependency-Track project UUIDs from artifacts
     * @param artifacts - Array of artifacts to extract UUIDs from
     * @returns Array of unique project UUIDs
     */
    private static extractDtrackProjectUuids(artifacts: any[]): string[] {
        const projectUuids: string[] = []
        
        artifacts.forEach((artifact: any) => {
            if (artifact.metrics && artifact.metrics.dependencyTrackFullUri) {
                const parts = String(artifact.metrics.dependencyTrackFullUri).split('/projects/')
                if (parts.length > 1) {
                    const projectUuid = parts[parts.length - 1]
                    if (projectUuid && !projectUuids.includes(projectUuid)) {
                        projectUuids.push(projectUuid)
                    }
                }
            }
        })

        return projectUuids
    }

    /**
     * Checks if any artifact has Dependency-Track integration
     * @param artifacts - Array of artifacts to check
     * @returns True if at least one artifact has Dependency-Track integration
     */
    static hasKnownDependencyTrackIntegration(artifacts: any[]): boolean {
        return artifacts.some((artifact: any) => 
            artifact.metrics && artifact.metrics.dependencyTrackFullUri
        )
    }
}
